<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="./style.css">

  <title>MetaStudy Hub</title>
</head>
<body>
  <div id="startPage">
    <div class="text">Launch Meta</div>
  </div>

  <div id="laptop">
    <h1>Streams & Subjects</h1>
    <div class="stream">
      <h2>Engineering</h2>
      <div class="subjects">
        <div class="subject"><span>Mathematics</span></div>
        <div class="subject"><span>Physics</span></div>
        <div class="subject"><span>Chemistry</span></div>
      </div>
    </div>
    <div class="stream">
      <h2>Arts</h2>
      <div class="subjects">
        <div class="subject"><span>History</span></div>
        <div class="subject"><span>Psychology</span></div>
        <div class="subject"><span>Sociology</span></div>
      </div>
    </div>
    <div class="stream">
      <h2>Commerce</h2>
      <div class="subjects">
        <div class="subject"><span>Economics</span></div>
        <div class="subject"><span>Accountancy</span></div>
        <div class="subject"><span>Business Studies</span></div>
      </div>
    </div>
    <img id="closeLaptop" src="https://img.icons8.com/ios-glyphs/30/multiply.png" alt="multiply"/> 
  </div>

  <script type="module" src="main.js"></script>

</body>
</html>



import * as THREE from 'three';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';

// Scene setup
const scene = new THREE.Scene();

// Camera setup
const camera = new THREE.PerspectiveCamera(
  50,
  window.innerWidth / window.innerHeight,
  0.1,
  1000
);
camera.position.set(7, 3.5, 4); // Initial camera position

// Renderer setup
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setPixelRatio(window.devicePixelRatio);
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

scene.background = new THREE.Color(0x87ceeb);

// Lighting setup
const light = new THREE.DirectionalLight(0xffffff, 5);
light.position.set(5, 10, 5);
scene.add(light);

const hemiLight = new THREE.HemisphereLight(0xffffff, 0x444444, 1);
scene.add(hemiLight);

const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
scene.add(ambientLight);

// GLTF Loader for models
const loader = new GLTFLoader();
let baseModel, originalModel, laptopModel;

// Load the base model
loader.load(
  './base.glb',
  (glb) => {
    baseModel = glb.scene;
    baseModel.scale.set(1, 1, 1);
    baseModel.position.set(0, -2, 0);
    scene.add(baseModel);

    // Load the original model
    loader.load(
      './metaroom.glb',
      (glb) => {
        originalModel = glb.scene;
        originalModel.scale.set(1, 1, 1);
        originalModel.position.set(0, 0, 0);
        baseModel.add(originalModel);

        // Find the laptop object in the model
        laptopModel = originalModel.getObjectByName('laptop');
      },
      undefined,
      (error) => console.error('Error loading original model:', error)
    );
  },
  undefined,
  (error) => console.error('Error loading base model:', error)
);

// OrbitControls setup
const controls = new OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;
controls.dampingFactor = 0.05;

// Raycaster for detecting clicks
const raycaster = new THREE.Raycaster();
const mouse = new THREE.Vector2();

function onMouseClick(event) {
  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

  raycaster.setFromCamera(mouse, camera);

  if (originalModel && laptopModel) {
    const intersects = raycaster.intersectObject(laptopModel, true);

    if (intersects.length > 0) {
      showLaptopDiv();
    }
  }
}

window.addEventListener('click', onMouseClick);

// Start page functionality
const startPage = document.getElementById('startPage');
const laptopDiv = document.getElementById('laptop');
const closeLaptopButton = document.getElementById('closeLaptop');

// Event listener for the start page
startPage.addEventListener('click', () => {
  startPage.style.display = 'none';
  renderer.domElement.style.display = 'block';
  animateCameraAndModel();
});

// Show the laptop div
function showLaptopDiv() {
  laptopDiv.style.display = 'block';
  renderer.domElement.style.display = 'none';
}

// Close the laptop div
closeLaptopButton.addEventListener('click', () => {
  laptopDiv.style.display = 'none';
  renderer.domElement.style.display = 'block';
});

// Smooth camera animation for backward movement and 360-degree rotation
function animateCameraAndModel() {
  const startPosition = new THREE.Vector3(0, 1.5, 0); // Start near the model
  const endPosition = new THREE.Vector3(7, 3.5, 4); // Move to initial camera position
  const startTime = performance.now();
  const duration = 3000; // 3 seconds

  // Disable OrbitControls during animation
  controls.enabled = false;

  function animate() {
    const elapsed = performance.now() - startTime;
    const t = Math.min(elapsed / duration, 1);

    // Interpolate the camera position
    camera.position.lerpVectors(startPosition, endPosition, t);
    camera.lookAt(0, 1, 0);

    // Rotate the model
    if (originalModel) {
      originalModel.rotation.y = t * Math.PI * 2; // 360-degree rotation
    }

    if (t < 1) {
      requestAnimationFrame(animate);
    } else {
      // End of animation, reset rotation
      if (originalModel) originalModel.rotation.y = 0;

      // Re-enable OrbitControls
      controls.enabled = true;
      controls.target.set(0, 1, 0); // Adjust target as needed
      controls.update();
    }

    renderer.render(scene, camera);
  }

  animate();
}

// Resize handler
window.addEventListener('resize', () => {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});

// Animation loop
function animate() {
  requestAnimationFrame(animate);
  controls.update();
  renderer.render(scene, camera);
}

animate();















